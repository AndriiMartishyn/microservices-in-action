spring:
  application:
    name: license-service
  config:
    import: "configserver:${CONFIGSERVER_URI}"

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/spmia-realm
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

jwt:
  auth:
    converter:
      resource-id: ostock
      principal-attribute: principal_username

logging:
  level:
    org.springframework.web: warn
    com.martishyn.licenseservice: info
    org.springframework.security: debug

resilience4j.circuitbreaker:
  configs:
    default:
      registerHealthIndicator: true

  instances:
    licenseService:
      registerHealthIndicator: true
      sliding-window-size: 5
      permitted-number-of-calls-in-half-open-state: 3
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      automatic-transition-from-open-to-half-open-enabled: true
      recordExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
        - java.util.concurrent.TimeoutException
        - org.springframework.web.client.ResourceAccessException
    organizationService:
      registerHealthIndicator: true
      waitDurationInOpenState: 20s
      failureRateThreshold: 60

resilience4j.bulkhead:
  instances:
    bulkheadLicenseService:
      maxWaitDuration: 10
      maxConcurrentCalls: 20
resilience4j.thread-pool-bulkhead:
  instances:
      bulkheadLicenseService:
        maxThreadPoolSize: 1
        coreThreadPoolSize: 1
        queueCapacity: 1
        keepAliveDuration: 20

resilience4j.ratelimiter:
  instances:
    licenseService:
      limitForPeriod: 5
      limitRefreshPeriod: 5000
      timeoutDuration: 1000ms

resilience4j.retry:
  instances:
    retryLicenseService:
      waitDuration: 10000
      retry-exceptions:
        - java.util.concurrent.TimeoutException
